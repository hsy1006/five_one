###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         11/May/2021  09:31:46 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\Enddevice.c                       #
#    Command line       =  -f D:\IARProject\five_one\Projects\zstack\Samples\ #
#                          GenericApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wEnd #
#                          ev.cfg (-DCPU32MHZ -DROOT=__near_func              #
#                          -DBLINK_LEDS) -f D:\IARProject\five_one\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wConfig.cfg (-DSECURE=0                  #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00008000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0x1005                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\Enddevice.c -D NWK_AUTO_POLL -D   #
#                          ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC -D MT_ZDO_FUNC  #
#                          -D LCD_SUPPORTED=DEBUG -D xPOWER_SAVING -lC        #
#                          D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\EndDeviceEB\List\ -lA             #
#                          D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\EndDeviceEB\List\                 #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\EndDeviceEB\Obj\ -e --debug       #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I D:\IARProject\five_one\Pro #
#                          jects\zstack\Samples\GenericApp\CC2530DB\ -I       #
#                          D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\..\SOURCE\ -I                     #
#                          D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I       #
#                          D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\MT\ -I  #
#                          D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\HAL\INC #
#                          LUDE\ -I D:\IARProject\five_one\Projects\zstack\Sa #
#                          mples\GenericApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\HAL\TARGET\CC2530EB\ -I                          #
#                          D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\OSAL\MC #
#                          U\CCSOC\ -I D:\IARProject\five_one\Projects\zstack #
#                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\OSAL\INCLUDE\ -I D:\IARProject\five_one\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\STACK\AF\ -I                        #
#                          D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\N #
#                          WK\ -I D:\IARProject\five_one\Projects\zstack\Samp #
#                          les\GenericApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          STACK\SEC\ -I D:\IARProject\five_one\Projects\zsta #
#                          ck\Samples\GenericApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SAPI\ -I D:\IARProject\five_one\Proje #
#                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\.. #
#                          \..\COMPONENTS\STACK\SYS\ -I                       #
#                          D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\STACK\Z #
#                          DO\ -I D:\IARProject\five_one\Projects\zstack\Samp #
#                          les\GenericApp\CC2530DB\..\..\..\..\..\COMPONENTS\ #
#                          ZMAC\F8W\ -I D:\IARProject\five_one\Projects\zstac #
#                          k\Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPO #
#                          NENTS\ZMAC\ -I D:\IARProject\five_one\Projects\zst #
#                          ack\Samples\GenericApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\SERVICES\SADDR\ -I                         #
#                          D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\SERVICE #
#                          S\SDATA\ -I D:\IARProject\five_one\Projects\zstack #
#                          \Samples\GenericApp\CC2530DB\..\..\..\..\..\COMPON #
#                          ENTS\MAC\INCLUDE\ -I D:\IARProject\five_one\Projec #
#                          ts\zstack\Samples\GenericApp\CC2530DB\..\..\..\..\ #
#                          ..\COMPONENTS\MAC\HIGH_LEVEL\ -I                   #
#                          D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\..\..\..\..\..\COMPONENTS\MAC\LOW #
#                          _LEVEL\srf04\ -I D:\IARProject\five_one\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz    #
#                          --require_prototypes                               #
#    List file          =  D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\EndDeviceEB\List\Enddevice.lst    #
#    Object file        =  D:\IARProject\five_one\Projects\zstack\Samples\Gen #
#                          ericApp\CC2530DB\EndDeviceEB\Obj\Enddevice.r51     #
#                                                                             #
#                                                                             #
###############################################################################

D:\IARProject\five_one\Projects\zstack\Samples\GenericApp\CC2530DB\Enddevice.c
      1          /*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      2          * 文件名  ： Enddevice
      3          * 作者    ： 黄舒怡、李梦婷、郑一凡
      4          * 版本    ： V1.0.0
      5          * 时间    ： 2021/5/10
      6          * 简要    ： 终端节点驱动文件
      7          ********************************************************************
      8          * 副本
      9          *
     10          *>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
     11          /* 头文件 ----------------------------------------------------------------*/
     12          #include "OSAL.h"
     13          #include "AF.h"
     14          #include "ZDApp.h"
     15          #include "ZDObject.h"
     16          #include "ZDProfile.h"
     17          #include <string.h>
     18          #include "Coordinator.h"
     19          #include "DebugTrace.h"
     20          #if !defined( WIN32 )
     21          #include "OnBoard.h"
     22          #endif
     23          #include "hal_lcd.h"
     24          #include "hal_led.h"
     25          #include "hal_key.h"
     26          #include "hal_uart.h"
     27          /* 宏定义 ----------------------------------------------------------------*/
     28          /* 结构体或枚举 ----------------------------------------------------------*/
     29          //演示如何实现点对点通信

   \                                 In  segment XDATA_ROM_C, align 1
     30          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] = 
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
     31          {
     32              GENERICAPP_CLUSTERID
     33          };
     34          //简单设备描述

   \                                 In  segment XDATA_ROM_C, align 1
     35          const SimpleDescriptionFormat_t GenericApp_SimpleDesc = 
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   00           DB 0
   \   000007   0000         DW 0H
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
     36          {
     37              GENERICAPP_ENDPOINT,
     38              GENERICAPP_PROFID,
     39              GENERICAPP_DEVICEID,
     40              GENERICAPP_DEVICE_VERSION,
     41              GENERICAPP_FLAGS,
     42              0,
     43              (cId_t *)NULL,
     44              GENERICAPP_MAX_CLUSTERS,
     45              (cId_t *)GenericApp_ClusterList
     46          };
     47          //定义四个变量

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     48          endPointDesc_t GenericApp_epDesc;//节点描述符
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     49          byte GenericApp_TaskID;//任务优先级
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     50          byte GenericApp_TransID;//数据发送序列号
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     51          devStates_t GenericApp_NwkState;//保存节点状态
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     52          /* 内部函数声明 ----------------------------------------------------------*/
     53          void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );//消息处理函数声明
     54          void GenericApp_SendTheMessage( void );//数据发送函数声明
     55          /* 函数 ------------------------------------------------------------------*/
     56          /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     57          * 函数名  ： GenericApp_Init
     58          * 参数    ： byte task_id
     59          * 返回    ： void
     60          * 作者    ： 黄舒怡、李梦婷、郑一凡
     61          * 时间    ： 2021/5/10
     62          * 描述    ： 任务初始化函数
     63          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     64          void GenericApp_Init( byte task_id )
   \                     GenericApp_Init:
     65          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
     66              GenericApp_TaskID             = task_id;//优先级初始化
   \   000006   90....       MOV     DPTR,#GenericApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
     67              GenericApp_NwkState           = DEV_INIT;//初始化设备状态
   \   00000A   90....       MOV     DPTR,#GenericApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
     68              GenericApp_TransID            = 0;//数据发送序列号初始化
   \   000010   90....       MOV     DPTR,#GenericApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
     69              //节点描述初始化
     70              GenericApp_epDesc.endPoint    = GENERICAPP_ENDPOINT;
   \   000015   90....       MOV     DPTR,#GenericApp_epDesc
   \   000018   740A         MOV     A,#0xa
   \   00001A   F0           MOVX    @DPTR,A
     71              GenericApp_epDesc.task_id     = &GenericApp_TaskID;
   \   00001B   A3           INC     DPTR
   \   00001C   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000022   F0           MOVX    @DPTR,A
     72              GenericApp_epDesc.simpleDesc  =
     73                  (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000023   A3           INC     DPTR
   \   000024   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00002A   F0           MOVX    @DPTR,A
     74              GenericApp_epDesc.latencyReq  = noLatencyReqs;
   \   00002B   A3           INC     DPTR
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
     75              afRegister( &GenericApp_epDesc );//将节点描述符进行注册
   \   00002E                ; Setup parameters for call to function afRegister
   \   00002E   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   000030   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000032   12....       LCALL   ??afRegister?relay
     76          }
   \   000035   7F01         MOV     R7,#0x1
   \   000037   02....       LJMP    ?BANKED_LEAVE_XDATA
     77          /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     78          * 函数名  ： GenericApp_ProcessEvent
     79          * 参数    ： byte task_id, Uint16 event
     80          * 返回    ： UINT16
     81          * 作者    ： 黄舒怡、李梦婷、郑一凡
     82          * 时间    ： 2021/5/10
     83          * 描述    ： 消息处理函数
     84          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     85          UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
   \                     GenericApp_ProcessEvent:
     86          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
     87              afIncomingMSGPacket_t *MSGpkt;//定义指向接收消息结构体的指针
     88              if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   603C         JZ      ??GenericApp_ProcessEvent_0
     89              {
     90                  MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive(GenericApp_TaskID );//从消息队列上接收消息
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   801D         SJMP    ??GenericApp_ProcessEvent_1
     91                  while ( MSGpkt )
     92                  {
     93                      switch ( MSGpkt->hdr.event )
   \                     ??GenericApp_ProcessEvent_2:
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   64D1         XRL     A,#0xd1
   \   000017   700D         JNZ     ??GenericApp_ProcessEvent_3
     94                      {
     95                          case ZDO_STATE_CHANGE:
     96                              GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);//读取节点设备类型
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   90....       MOV     DPTR,#GenericApp_NwkState
   \   00001E   F0           MOVX    @DPTR,A
     97                              if (GenericApp_NwkState == DEV_END_DEVICE)//实现数据发送
   \   00001F   6406         XRL     A,#0x6
   \   000021   7003         JNZ     ??GenericApp_ProcessEvent_3
     98                              {
     99                                  GenericApp_SendTheMessage() ;
   \   000023                ; Setup parameters for call to function GenericApp_SendTheMessage
   \   000023   12....       LCALL   ??GenericApp_SendTheMessage?relay
    100                              }
    101                              break;
    102                          default:
    103                              break;
    104                      }
    105                      osal_msg_deallocate( (uint8 *)MSGpkt );//处理接收到的消息后，释放存储空间
   \                     ??GenericApp_ProcessEvent_3:
   \   000026                ; Setup parameters for call to function osal_msg_deallocate
   \   000026   EE           MOV     A,R6
   \   000027   FA           MOV     R2,A
   \   000028   EF           MOV     A,R7
   \   000029   FB           MOV     R3,A
   \   00002A   12....       LCALL   ??osal_msg_deallocate?relay
    106                      MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive
    107                          ( GenericApp_TaskID );//再从消息队列里接收消息
   \   00002D                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   00002D   90....       MOV     DPTR,#GenericApp_TaskID
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F9           MOV     R1,A
   \   000032   12....       LCALL   ??osal_msg_receive?relay
   \   000035   8A..         MOV     ?V0 + 2,R2
   \   000037   8B..         MOV     ?V0 + 3,R3
   \   000039   AE..         MOV     R6,?V0 + 2
   \   00003B   AF..         MOV     R7,?V0 + 3
    108                  }
   \   00003D   EE           MOV     A,R6
   \   00003E   4F           ORL     A,R7
   \   00003F   70CF         JNZ     ??GenericApp_ProcessEvent_2
    109                  return (events ^ SYS_EVENT_MSG);
   \   000041   AA..         MOV     R2,?V0 + 0
   \   000043   E5..         MOV     A,?V0 + 1
   \   000045   6480         XRL     A,#0x80
   \   000047   FB           MOV     R3,A
   \   000048   8004         SJMP    ??GenericApp_ProcessEvent_4
    110              }
    111              return 0;
   \                     ??GenericApp_ProcessEvent_0:
   \   00004A   7A00         MOV     R2,#0x0
   \   00004C   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_4:
   \   00004E   7F04         MOV     R7,#0x4
   \   000050   02....       LJMP    ?BANKED_LEAVE_XDATA
    112          }
    113          /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    114          * 函数名  ： GenericApp_SendTheMessage
    115          * 参数    ： void
    116          * 返回    ： void
    117          * 作者    ： 黄舒怡、李梦婷、郑一凡
    118          * 时间    ： 2021/5/10
    119          * 描述    ： 消息发送函数
    120          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    121          void GenericApp_SendTheMessage( void )
   \                     GenericApp_SendTheMessage:
    122          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    123              unsigned char theMessageData[4] = "LED";//存放要发送的数据
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant "LED">` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant "LED">` & 0xff
   \   00001A   7404         MOV     A,#0x4
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    124              afAddrType_t my_DstAddr;
    125              my_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00001F   740C         MOV     A,#0xc
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   7402         MOV     A,#0x2
   \   000026   F0           MOVX    @DPTR,A
    126              my_DstAddr.endPoint = GENERICAPP_ENDPOINT;
   \   000027   740D         MOV     A,#0xd
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   740A         MOV     A,#0xa
   \   00002E   F0           MOVX    @DPTR,A
    127              my_DstAddr.addr.shortAddr = 0x0000;
   \   00002F   7404         MOV     A,#0x4
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   F0           MOVX    @DPTR,A
    128              AF_DataRequest( &my_DstAddr, &GenericApp_epDesc,GENERICAPP_CLUSTERID, 3,
    129                                 theMessageData,
    130                                 &GenericApp_TransID,
    131                                 AF_DISCV_ROUTE,
    132                                 AF_DEFAULT_RADIUS );//无线数据的发送
   \   000038                ; Setup parameters for call to function AF_DataRequest
   \   000038   75..1E       MOV     ?V0 + 0,#0x1e
   \   00003B   78..         MOV     R0,#?V0 + 0
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000040   75....       MOV     ?V0 + 0,#GenericApp_TransID & 0xff
   \   000043   75....       MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004B   7403         MOV     A,#0x3
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   8582..       MOV     ?V0 + 0,DPL
   \   000053   8583..       MOV     ?V0 + 1,DPH
   \   000056   78..         MOV     R0,#?V0 + 0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   75..03       MOV     ?V0 + 0,#0x3
   \   00005E   75..00       MOV     ?V0 + 1,#0x0
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   75..01       MOV     ?V0 + 0,#0x1
   \   000069   78..         MOV     R0,#?V0 + 0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   7920         MOV     R1,#0x20
   \   000070   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   000072   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   000074   740D         MOV     A,#0xd
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   AA82         MOV     R2,DPL
   \   00007B   AB83         MOV     R3,DPH
   \   00007D   12....       LCALL   ??AF_DataRequest?relay
   \   000080   7409         MOV     A,#0x9
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
    133              HalLedBlink(HAL_LED_2,0,50,500);
   \   000085                ; Setup parameters for call to function HalLedBlink
   \   000085   7CF4         MOV     R4,#-0xc
   \   000087   7D01         MOV     R5,#0x1
   \   000089   7B32         MOV     R3,#0x32
   \   00008B   7A00         MOV     R2,#0x0
   \   00008D   7902         MOV     R1,#0x2
   \   00008F   12....       LCALL   ??HalLedBlink?relay
    134          }
   \   000092   7410         MOV     A,#0x10
   \   000094   12....       LCALL   ?DEALLOC_XSTACK8
   \   000097   7F02         MOV     R7,#0x2
   \   000099   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_SendTheMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "LED">`:
   \   000000   4C454400     DB "LED"
    135                                           
    136              
    137                              

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     GenericApp_Init                    0      0      9
       -> afRegister                    0      0     18
     GenericApp_ProcessEvent            0      0     12
       -> osal_msg_receive              0      0     24
       -> GenericApp_SendTheMessage     0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
     GenericApp_SendTheMessage          2      0     47
       -> AF_DataRequest                0      0     70
       -> HalLedBlink                   0      0     52


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     GenericApp_ClusterList               2
     GenericApp_SimpleDesc               12
     GenericApp_epDesc                    6
     GenericApp_TaskID                    1
     GenericApp_TransID                   1
     GenericApp_NwkState                  1
     GenericApp_Init                     58
     GenericApp_ProcessEvent             83
     GenericApp_SendTheMessage          156
     ??GenericApp_Init?relay              6
     ??GenericApp_ProcessEvent?relay      6
     ??GenericApp_SendTheMessage?relay    6
     ?<Constant "LED">                    4

 
 297 bytes in segment BANKED_CODE
  18 bytes in segment BANK_RELAYS
  18 bytes in segment XDATA_ROM_C
   9 bytes in segment XDATA_Z
 
 315 bytes of CODE  memory
  18 bytes of CONST memory
   9 bytes of XDATA memory

Errors: none
Warnings: none
